{"version":3,"sources":["components/Country/Country.js","components/ContryList/CountryList.js","components/SearchBox/SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Country","stats","className","name","src","code","toLowerCase","alt","population","latest_data","confirmed","recovered","deaths","CountryList","props","countries","map","country","key","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","e","setState","target","value","fetch","resp","json","data","this","filteredCountries","filter","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mWAoBeA,G,YAlBC,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAEd,OACI,yBAAKC,UAAU,WACX,4BAAKD,EAAME,MACX,yBAAKC,IAAG,sCAAiCH,EAAMI,KAAKC,cAA5C,iBAA0EC,IAAKN,EAAME,OAC7F,yBAAKD,UAAU,eACX,kDAAoBD,EAAMO,aAC1B,iDAAmBP,EAAMQ,YAAYC,YACrC,iDAAmBT,EAAMQ,YAAYE,YACrC,8CAAgBV,EAAMQ,YAAYG,aCInCC,G,MAZK,SAACC,GACjB,OACI,yBAAKZ,UAAU,eAEPY,EAAMC,UAAUC,KACZ,SAAAC,GAAO,OAAI,kBAAC,EAAD,CAASC,IAAKD,EAAQZ,KAAMJ,MAAOgB,UCInDE,G,MAVG,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAC7B,OACI,2BAAOC,KAAK,SACZpB,UAAU,YACVkB,YAAaA,EACbG,SAAYF,MCgCLG,E,4MAjCbC,MAAQ,CACNV,UAAU,GACVW,YAAa,I,EAUfL,aAAe,SAACM,GAAD,OACb,EAAKC,SAAS,CAACF,YAAaC,EAAEE,OAAOC,S,oMAPlBC,MAAM,oC,cAAnBC,E,gBACgBA,EAAKC,O,OAC3BlB,GADIA,E,QACkBmB,KACtBC,KAAKP,SAAS,CAACb,c,qIAOR,IAAD,EAE2BoB,KAAKV,MAA/BV,EAFD,EAECA,UAAWW,EAFZ,EAEYA,YACZU,EAAoBrB,EAAUsB,QAAO,SAAApB,GAAO,OAChDA,EAAQd,KAAKG,cAAcgC,SAASZ,EAAYpB,kBAGlD,OACE,yBAAKJ,UAAU,OACX,qDACA,kBAAC,EAAD,CAAWkB,YAAY,yBAAyBC,aAAcc,KAAKd,eACnE,kBAAC,EAAD,CAAaN,UAAaqB,S,GA7BlBG,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.18808e55.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Country.css' \r\nconst Country = ({stats}) => {\r\n\r\n    return(\r\n        <div className='Country'>\r\n            <h1>{stats.name}</h1>\r\n            <img src={`https://www.countryflags.io/${stats.code.toLowerCase()}/shiny/64.png`} alt={stats.name}></img>\r\n            <div className='Description'>\r\n                <p>{`Population : ${stats.population}`}</p>\r\n                <p>{`Confirmed : ${stats.latest_data.confirmed}`}</p>\r\n                <p>{`Recovered : ${stats.latest_data.recovered}`}</p>\r\n                <p>{`Deaths : ${stats.latest_data.deaths}`}</p>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Country;","import React from 'react';\r\nimport Country from '../Country/Country';\r\nimport './CountryList.css';\r\n\r\nconst CountryList = (props) => {\r\n    return(\r\n        <div className='CountryList'>\r\n            {\r\n                props.countries.map(\r\n                    country => <Country key={country.code} stats={country} />\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CountryList;","import React from 'react';\r\nimport './SearchBox.css'\r\n\r\nconst SearchBox = ({placeholder, handleChange}) => {\r\n    return(\r\n        <input type='search'\r\n        className='SearchBox'\r\n        placeholder={placeholder}\r\n        onChange = {handleChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\nimport './App.css';\nimport CountryList from './components/ContryList/CountryList';\nimport SearchBox from './components/SearchBox/SearchBox'\n\nclass App extends React.Component{\n\n  state = {\n    countries:[],\n    searchField: ''\n  }\n\n  async componentDidMount(){\n    const resp = await fetch('https://corona-api.com/countries');\n    let countries = await resp.json();\n    countries = countries.data\n    this.setState({countries});\n  }\n\n  handleChange = (e) => (\n    this.setState({searchField: e.target.value})\n  )  \n\n  render(){\n\n    const {countries, searchField} = this.state\n    const filteredCountries = countries.filter(country => (\n      country.name.toLowerCase().includes(searchField.toLowerCase())\n    ) )\n\n    return (\n      <div className=\"App\">\n          <h1>Covid19 Stats Web App</h1>\n          <SearchBox placeholder=\"Enter country name ...\" handleChange={this.handleChange} />\n          <CountryList countries = {filteredCountries} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}